name: tests
on: [pull_request]

env:
  DOCKER_FILE_DIRECTORY: environments
  DOCKER_COMPOSE_DIRECTORY: environments/ci
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_BUILDKIT: 1
  USE_CACHE: true

jobs:
  lint-and-test:
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.image }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        python-version: ["3.8", "3.9"]
        include:
          - os: ubuntu
            image: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Check version info
        run: pwd && docker compose --version && docker --version

      - name: Set up Docker Buildx
        if: env.USE_CACHE == 'true'
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        if: env.USE_CACHE == 'true'
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache/${{ matrix.python-version }}
          key: buildx-${{ hashFiles(format('{0}/Dockerfile', env.DOCKER_FILE_DIRECTORY), format('{0}/docker-compose.yaml', env.DOCKER_COMPOSE_DIRECTORY)) }}

      - name: Build docker image with cache using buildx
        if: steps.cache-buildx-cache.outputs.cache-hit == 'true' && env.USE_CACHE == 'true'
        uses: docker/bake-action@v4
        with:
          files: docker-compose.yaml
          workdir: ${{ env.DOCKER_COMPOSE_DIRECTORY }}
          load: true
          set: |
            core.args.PYTHON_VERSION=${{ matrix.python-version }}
            *.cache-from=type=local,src=/tmp/.buildx-cache/${{ matrix.python-version }}

      - name: Build docker image without cache using normal build
        if: steps.cache-buildx-cache.outputs.cache-hit != 'true' || env.USE_CACHE != 'true'
        run: docker compose build --parallel --build-arg PYTHON_VERSION=${{ matrix.python-version }} core
        working-directory: ${{ env.DOCKER_COMPOSE_DIRECTORY }}

      - name: Create and start docker container
        run: docker compose up --no-build -d
        working-directory: ${{ env.DOCKER_COMPOSE_DIRECTORY }}

      # pytest-cov export coverage data to a file
      # However, the directory made by actions/checkout does not allow write
      # chmod is needed to resolve above problem
      - name: Change permission
        run: chmod 777 .

      # In the built stage of Docker image, .venv dir is moved from working directory to prevent
      # overwrite by volume operation of Docker. Here, .venv is moved back to working directory.
      - name: Move .venv directory
        run: docker compose exec -T core mv ../.venv .
        working-directory: ${{ env.DOCKER_COMPOSE_DIRECTORY }}

      - name: Run lint
        run: docker compose exec -T core make lint
        working-directory: ${{ env.DOCKER_COMPOSE_DIRECTORY }}

      - name: Run test code
        run: docker compose exec -T core make test
        working-directory: ${{ env.DOCKER_COMPOSE_DIRECTORY }}

        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        if: env.USE_CACHE == 'true'
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache